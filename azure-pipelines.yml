# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  tfstate: 'terraform.tfstate'
  tfbucket: 'tf-azure-terraform-state'

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            displayName: 'install'          
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV3@3
            displayName: 'init'
            inputs:
              provider: 'aws'
              command: 'init'
              backendServiceAWS: 'terraform'
              backendAWSBucketName: '$(tfbucket)'
              backendAWSKey: '$(tfstate)'
          - task: TerraformTaskV3@3
            displayName: 'validate'
            inputs:
              provider: 'aws'
              command: 'validate'
  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            displayName: 'install'          
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV3@3
            displayName: 'plan'
            inputs:
              provider: 'aws'
              command: 'plan'
          - task: TerraformTaskV3@3
            inputs:
              provider: 'aws'
              command: 'apply'
              environmentServiceNameAWS: 'terraform'
          

          